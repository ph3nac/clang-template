# cmake_minimum_required(VERSION 3.0.0)
# project(mylib_lib
#   VERSION 1.0.0
#   DESCRIPTION "lib"
#   LANGUAGES CXX
#   )
# add_library(mylib STATIC lib.cpp)
# target_compile_features(mylib PRIVATE cxx_std_17)
# target_include_directories(mylib INTERFACE ../include/clang-template/)
# set_target_properties(mylib
#   PROPERTIES
#   VERSION ${PROJECT_VERSION}
# )

# Note that headers are optional, and do not affect add_library, but they will
# not show up in IDEs unless they are listed in add_library.

# Optionally glob, but only for CMake 3.12 or later: file(GLOB HEADER_LIST
# CONFIGURE_DEPENDS "${ModernCMakeExample_SOURCE_DIR}/include/modern/*.hpp")
set(HEADER_LIST "${ClangTemplate_SOURCE_DIR}/include/clang-template/lib.hpp")

# Make an automatic library - will be static or dynamic based on user setting
add_library(my_lib lib.cpp ${HEADER_LIST})

# We need this directory, and users of our library will need it too
target_include_directories(my_lib PUBLIC ../include)

# This depends on (header only) boost
target_link_libraries(my_lib PRIVATE Boost::boost)

# All users of this library will need at least C++11
target_compile_features(my_lib PUBLIC cxx_std_11)

# IDEs should put the headers in a nice place
source_group(
  TREE "${PROJECT_SOURCE_DIR}/include"
  PREFIX "Header Files"
  FILES ${HEADER_LIST})
